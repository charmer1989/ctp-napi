#include "Trader.h"

int TdReqID = 0;

Napi::Value Trader::Call(const Napi::CallbackInfo &info) {
  if (Trader::isDebug) {
    std::cout << "[DEBUG in C++]: "
              << "Trader::Call called" << std::endl;
  }

  if (!info[0].IsString()) {
    throw Napi::Error::New(info.Env(), "参数错误");
  }
  if (!info[1].IsObject()) {
    throw Napi::Error::New(info.Env(), "参数错误");
  }
  std::string funcName = info[0].As<Napi::String>();
  Napi::Object params  = info[1].As<Napi::Object>();

  if (funcName == "connect") {
    TD_DEBUG_LOG("call function connect begin");
    this->api = CThostFtdcTraderApi::CreateFtdcTraderApi("");
    char address[50];
    strcpy(address, getString(params, "IP").c_str());
    this->api->RegisterFront(address);
    this->api->RegisterSpi(this);
    this->api->SubscribePrivateTopic(THOST_TERT_RESTART);
    this->api->SubscribePublicTopic(THOST_TERT_RESTART);
    this->api->Init();
    TD_DEBUG_LOG("call function connect done!!!");
  } else if (funcName == "reqAuthenticate") {
    TD_DEBUG_LOG("call function reqAuthenticate");
    TdReqID++;
    CThostFtdcReqAuthenticateField req;
    memset(&req, 0, sizeof(CThostFtdcReqAuthenticateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.UserProductInfo, getString(params, "UserProductInfo").c_str());
    strcpy(req.AuthCode, getString(params, "AuthCode").c_str());
    int ret = this->api->ReqAuthenticate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqUserLogin") {
    TD_DEBUG_LOG("call function reqUserLogin");
    TdReqID++;
    CThostFtdcReqUserLoginField req;
    memset(&req, 0, sizeof(CThostFtdcReqUserLoginField));
    strcpy(req.TradingDay, getString(params, "TradingDay").c_str());
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.Password, getString(params, "Password").c_str());
    strcpy(req.UserProductInfo, getString(params, "UserProductInfo").c_str());
    strcpy(req.InterfaceProductInfo, getString(params, "InterfaceProductInfo").c_str());
    strcpy(req.ProtocolInfo, getString(params, "ProtocolInfo").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    strcpy(req.OneTimePassword, getString(params, "OneTimePassword").c_str());
    strcpy(req.ClientIPAddress, getString(params, "ClientIPAddress").c_str());
    strcpy(req.LoginRemark, getString(params, "LoginRemark").c_str());
    int ret = this->api->ReqUserLogin(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqUserLogout") {
    TD_DEBUG_LOG("call function reqUserLogout");
    TdReqID++;
    CThostFtdcUserLogoutField req;
    memset(&req, 0, sizeof(CThostFtdcUserLogoutField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    int ret = this->api->ReqUserLogout(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqUserPasswordUpdate") {
    TD_DEBUG_LOG("call function reqUserPasswordUpdate");
    TdReqID++;
    CThostFtdcUserPasswordUpdateField req;
    memset(&req, 0, sizeof(CThostFtdcUserPasswordUpdateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.OldPassword, getString(params, "OldPassword").c_str());
    strcpy(req.NewPassword, getString(params, "NewPassword").c_str());
    int ret = this->api->ReqUserPasswordUpdate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqTradingAccountPasswordUpdate") {
    TD_DEBUG_LOG("call function reqTradingAccountPasswordUpdate");
    TdReqID++;
    CThostFtdcTradingAccountPasswordUpdateField req;
    memset(&req, 0, sizeof(CThostFtdcTradingAccountPasswordUpdateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.OldPassword, getString(params, "OldPassword").c_str());
    strcpy(req.NewPassword, getString(params, "NewPassword").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    int ret = this->api->ReqTradingAccountPasswordUpdate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqOrderInsert") {
    TD_DEBUG_LOG("call function reqOrderInsert");
    TdReqID++;
    CThostFtdcInputOrderField req;
    memset(&req, 0, sizeof(CThostFtdcInputOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.OrderRef, getString(params, "OrderRef").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.OrderPriceType = getChar(params, "OrderPriceType");
    req.Direction      = getChar(params, "Direction");
    strcpy(req.CombOffsetFlag, getString(params, "CombOffsetFlag").c_str());
    strcpy(req.CombHedgeFlag, getString(params, "CombHedgeFlag").c_str());
    req.LimitPrice          = getNumber(params, "LimitPrice");
    req.VolumeTotalOriginal = getNumber(params, "VolumeTotalOriginal");
    req.TimeCondition       = getChar(params, "TimeCondition");
    strcpy(req.GTDDate, getString(params, "GTDDate").c_str());
    req.VolumeCondition     = getChar(params, "VolumeCondition");
    req.MinVolume           = getNumber(params, "MinVolume");
    req.ContingentCondition = getChar(params, "ContingentCondition");
    req.StopPrice           = getNumber(params, "StopPrice");
    req.ForceCloseReason    = getChar(params, "ForceCloseReason");
    req.IsAutoSuspend       = getNumber(params, "IsAutoSuspend");
    strcpy(req.BusinessUnit, getString(params, "BusinessUnit").c_str());
    req.RequestID      = getNumber(params, "RequestID");
    req.UserForceClose = getNumber(params, "UserForceClose");
    req.IsSwapOrder    = getNumber(params, "IsSwapOrder");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    strcpy(req.ClientID, getString(params, "ClientID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqOrderInsert(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqParkedOrderInsert") {
    TD_DEBUG_LOG("call function reqParkedOrderInsert");
    TdReqID++;
    CThostFtdcParkedOrderField req;
    memset(&req, 0, sizeof(CThostFtdcParkedOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.OrderRef, getString(params, "OrderRef").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.OrderPriceType = getChar(params, "OrderPriceType");
    req.Direction      = getChar(params, "Direction");
    strcpy(req.CombOffsetFlag, getString(params, "CombOffsetFlag").c_str());
    strcpy(req.CombHedgeFlag, getString(params, "CombHedgeFlag").c_str());
    req.LimitPrice          = getNumber(params, "LimitPrice");
    req.VolumeTotalOriginal = getNumber(params, "VolumeTotalOriginal");
    req.TimeCondition       = getChar(params, "TimeCondition");
    strcpy(req.GTDDate, getString(params, "GTDDate").c_str());
    req.VolumeCondition     = getChar(params, "VolumeCondition");
    req.MinVolume           = getNumber(params, "MinVolume");
    req.ContingentCondition = getChar(params, "ContingentCondition");
    req.StopPrice           = getNumber(params, "StopPrice");
    req.ForceCloseReason    = getChar(params, "ForceCloseReason");
    req.IsAutoSuspend       = getNumber(params, "IsAutoSuspend");
    strcpy(req.BusinessUnit, getString(params, "BusinessUnit").c_str());
    req.RequestID      = getNumber(params, "RequestID");
    req.UserForceClose = getNumber(params, "UserForceClose");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.ParkedOrderID, getString(params, "ParkedOrderID").c_str());
    req.UserType = getChar(params, "UserType");
    req.Status   = getChar(params, "Status");
    req.ErrorID  = getNumber(params, "ErrorID");
    strcpy(req.ErrorMsg, getString(params, "ErrorMsg").c_str());
    req.IsSwapOrder = getNumber(params, "IsSwapOrder");
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    strcpy(req.ClientID, getString(params, "ClientID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqParkedOrderInsert(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqParkedOrderAction") {
    TD_DEBUG_LOG("call function reqParkedOrderAction");
    TdReqID++;
    CThostFtdcParkedOrderActionField req;
    memset(&req, 0, sizeof(CThostFtdcParkedOrderActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    req.OrderActionRef = getNumber(params, "OrderActionRef");
    strcpy(req.OrderRef, getString(params, "OrderRef").c_str());
    req.RequestID = getNumber(params, "RequestID");
    req.FrontID   = getNumber(params, "FrontID");
    req.SessionID = getNumber(params, "SessionID");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.OrderSysID, getString(params, "OrderSysID").c_str());
    req.ActionFlag   = getChar(params, "ActionFlag");
    req.LimitPrice   = getNumber(params, "LimitPrice");
    req.VolumeChange = getNumber(params, "VolumeChange");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ParkedOrderActionID, getString(params, "ParkedOrderActionID").c_str());
    req.UserType = getChar(params, "UserType");
    req.Status   = getChar(params, "Status");
    req.ErrorID  = getNumber(params, "ErrorID");
    strcpy(req.ErrorMsg, getString(params, "ErrorMsg").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqParkedOrderAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqOrderAction") {
    TD_DEBUG_LOG("call function reqOrderAction");
    TdReqID++;
    CThostFtdcInputOrderActionField req;
    memset(&req, 0, sizeof(CThostFtdcInputOrderActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    req.OrderActionRef = getNumber(params, "OrderActionRef");
    strcpy(req.OrderRef, getString(params, "OrderRef").c_str());
    req.RequestID = getNumber(params, "RequestID");
    req.FrontID   = getNumber(params, "FrontID");
    req.SessionID = getNumber(params, "SessionID");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    // strcpy(req.OrderSysID, getString(params, "OrderSysID").c_str());
    req.ActionFlag = getChar(params, "ActionFlag");
    // req.LimitPrice   = getNumber(params, "LimitPrice");
    // req.VolumeChange = getNumber(params, "VolumeChange");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    // strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    // strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqOrderAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQueryMaxOrderVolume") {
    TD_DEBUG_LOG("call function reqQueryMaxOrderVolume");
    TdReqID++;
    CThostFtdcQueryMaxOrderVolumeField req;
    memset(&req, 0, sizeof(CThostFtdcQueryMaxOrderVolumeField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    req.Direction  = getChar(params, "Direction");
    req.OffsetFlag = getChar(params, "OffsetFlag");
    req.HedgeFlag  = getChar(params, "HedgeFlag");
    req.MaxVolume  = getNumber(params, "MaxVolume");
    int ret        = this->api->ReqQueryMaxOrderVolume(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqSettlementInfoConfirm") {
    TD_DEBUG_LOG("call function reqSettlementInfoConfirm");
    TdReqID++;
    CThostFtdcSettlementInfoConfirmField req;
    memset(&req, 0, sizeof(CThostFtdcSettlementInfoConfirmField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.ConfirmDate, getString(params, "ConfirmDate").c_str());
    strcpy(req.ConfirmTime, getString(params, "ConfirmTime").c_str());
    int ret = this->api->ReqSettlementInfoConfirm(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqRemoveParkedOrder") {
    TD_DEBUG_LOG("call function reqRemoveParkedOrder");
    TdReqID++;
    CThostFtdcRemoveParkedOrderField req;
    memset(&req, 0, sizeof(CThostFtdcRemoveParkedOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.ParkedOrderID, getString(params, "ParkedOrderID").c_str());
    int ret = this->api->ReqRemoveParkedOrder(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqRemoveParkedOrderAction") {
    TD_DEBUG_LOG("call function reqRemoveParkedOrderAction");
    TdReqID++;
    CThostFtdcRemoveParkedOrderActionField req;
    memset(&req, 0, sizeof(CThostFtdcRemoveParkedOrderActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.ParkedOrderActionID, getString(params, "ParkedOrderActionID").c_str());
    int ret = this->api->ReqRemoveParkedOrderAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqExecOrderInsert") {
    TD_DEBUG_LOG("call function reqExecOrderInsert");
    TdReqID++;
    CThostFtdcInputExecOrderField req;
    memset(&req, 0, sizeof(CThostFtdcInputExecOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExecOrderRef, getString(params, "ExecOrderRef").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.Volume    = getNumber(params, "Volume");
    req.RequestID = getNumber(params, "RequestID");
    strcpy(req.BusinessUnit, getString(params, "BusinessUnit").c_str());
    req.OffsetFlag          = getChar(params, "OffsetFlag");
    req.HedgeFlag           = getChar(params, "HedgeFlag");
    req.ActionType          = getChar(params, "ActionType");
    req.PosiDirection       = getChar(params, "PosiDirection");
    req.ReservePositionFlag = getChar(params, "ReservePositionFlag");
    req.CloseFlag           = getChar(params, "CloseFlag");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    strcpy(req.ClientID, getString(params, "ClientID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqExecOrderInsert(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqExecOrderAction") {
    TD_DEBUG_LOG("call function reqExecOrderAction");
    TdReqID++;
    CThostFtdcInputExecOrderActionField req;
    memset(&req, 0, sizeof(CThostFtdcInputExecOrderActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    req.ExecOrderActionRef = getNumber(params, "ExecOrderActionRef");
    strcpy(req.ExecOrderRef, getString(params, "ExecOrderRef").c_str());
    req.RequestID = getNumber(params, "RequestID");
    req.FrontID   = getNumber(params, "FrontID");
    req.SessionID = getNumber(params, "SessionID");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.ExecOrderSysID, getString(params, "ExecOrderSysID").c_str());
    req.ActionFlag = getChar(params, "ActionFlag");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqExecOrderAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqForQuoteInsert") {
    TD_DEBUG_LOG("call function reqForQuoteInsert");
    TdReqID++;
    CThostFtdcInputForQuoteField req;
    memset(&req, 0, sizeof(CThostFtdcInputForQuoteField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ForQuoteRef, getString(params, "ForQuoteRef").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqForQuoteInsert(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQuoteInsert") {
    TD_DEBUG_LOG("call function reqQuoteInsert");
    TdReqID++;
    CThostFtdcInputQuoteField req;
    memset(&req, 0, sizeof(CThostFtdcInputQuoteField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.QuoteRef, getString(params, "QuoteRef").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.AskPrice  = getNumber(params, "AskPrice");
    req.BidPrice  = getNumber(params, "BidPrice");
    req.AskVolume = getNumber(params, "AskVolume");
    req.BidVolume = getNumber(params, "BidVolume");
    req.RequestID = getNumber(params, "RequestID");
    strcpy(req.BusinessUnit, getString(params, "BusinessUnit").c_str());
    req.AskOffsetFlag = getChar(params, "AskOffsetFlag");
    req.BidOffsetFlag = getChar(params, "BidOffsetFlag");
    req.AskHedgeFlag  = getChar(params, "AskHedgeFlag");
    req.BidHedgeFlag  = getChar(params, "BidHedgeFlag");
    strcpy(req.AskOrderRef, getString(params, "AskOrderRef").c_str());
    strcpy(req.BidOrderRef, getString(params, "BidOrderRef").c_str());
    strcpy(req.ForQuoteSysID, getString(params, "ForQuoteSysID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.ClientID, getString(params, "ClientID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqQuoteInsert(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQuoteAction") {
    TD_DEBUG_LOG("call function reqQuoteAction");
    TdReqID++;
    CThostFtdcInputQuoteActionField req;
    memset(&req, 0, sizeof(CThostFtdcInputQuoteActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    req.QuoteActionRef = getNumber(params, "QuoteActionRef");
    strcpy(req.QuoteRef, getString(params, "QuoteRef").c_str());
    req.RequestID = getNumber(params, "RequestID");
    req.FrontID   = getNumber(params, "FrontID");
    req.SessionID = getNumber(params, "SessionID");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.QuoteSysID, getString(params, "QuoteSysID").c_str());
    req.ActionFlag = getChar(params, "ActionFlag");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.ClientID, getString(params, "ClientID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqQuoteAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqBatchOrderAction") {
    TD_DEBUG_LOG("call function reqBatchOrderAction");
    TdReqID++;
    CThostFtdcInputBatchOrderActionField req;
    memset(&req, 0, sizeof(CThostFtdcInputBatchOrderActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    req.OrderActionRef = getNumber(params, "OrderActionRef");
    req.RequestID      = getNumber(params, "RequestID");
    req.FrontID        = getNumber(params, "FrontID");
    req.SessionID      = getNumber(params, "SessionID");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.InvestUnitID, getString(params, "InvestUnitID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqBatchOrderAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqCombActionInsert") {
    TD_DEBUG_LOG("call function reqCombActionInsert");
    TdReqID++;
    CThostFtdcInputCombActionField req;
    memset(&req, 0, sizeof(CThostFtdcInputCombActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.CombActionRef, getString(params, "CombActionRef").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.Direction     = getChar(params, "Direction");
    req.Volume        = getNumber(params, "Volume");
    req.CombDirection = getChar(params, "CombDirection");
    req.HedgeFlag     = getChar(params, "HedgeFlag");
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.IPAddress, getString(params, "IPAddress").c_str());
    strcpy(req.MacAddress, getString(params, "MacAddress").c_str());
    int ret = this->api->ReqCombActionInsert(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryOrder") {
    TD_DEBUG_LOG("call function reqQryOrder");
    TdReqID++;
    CThostFtdcQryOrderField req;
    memset(&req, 0, sizeof(CThostFtdcQryOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.OrderSysID, getString(params, "OrderSysID").c_str());
    strcpy(req.InsertTimeStart, getString(params, "InsertTimeStart").c_str());
    strcpy(req.InsertTimeEnd, getString(params, "InsertTimeEnd").c_str());
    int ret = this->api->ReqQryOrder(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryTrade") {
    TD_DEBUG_LOG("call function reqQryTrade");
    TdReqID++;
    CThostFtdcQryTradeField req;
    memset(&req, 0, sizeof(CThostFtdcQryTradeField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.TradeID, getString(params, "TradeID").c_str());
    strcpy(req.TradeTimeStart, getString(params, "TradeTimeStart").c_str());
    strcpy(req.TradeTimeEnd, getString(params, "TradeTimeEnd").c_str());
    int ret = this->api->ReqQryTrade(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInvestorPosition") {
    TD_DEBUG_LOG("call function reqQryInvestorPosition");
    TdReqID++;
    CThostFtdcQryInvestorPositionField req;
    memset(&req, 0, sizeof(CThostFtdcQryInvestorPositionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryInvestorPosition(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryTradingAccount") {
    TD_DEBUG_LOG("call function reqQryTradingAccount");
    TdReqID++;
    CThostFtdcQryTradingAccountField req;
    memset(&req, 0, sizeof(CThostFtdcQryTradingAccountField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    int ret = this->api->ReqQryTradingAccount(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInvestor") {
    TD_DEBUG_LOG("call function reqQryInvestor");
    TdReqID++;
    CThostFtdcQryInvestorField req;
    memset(&req, 0, sizeof(CThostFtdcQryInvestorField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    int ret = this->api->ReqQryInvestor(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryTradingCode") {
    TD_DEBUG_LOG("call function reqQryTradingCode");
    TdReqID++;
    CThostFtdcQryTradingCodeField req;
    memset(&req, 0, sizeof(CThostFtdcQryTradingCodeField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.ClientID, getString(params, "ClientID").c_str());
    req.ClientIDType = getChar(params, "ClientIDType");
    int ret          = this->api->ReqQryTradingCode(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInstrumentMarginRate") {
    TD_DEBUG_LOG("call function reqQryInstrumentMarginRate");
    TdReqID++;
    CThostFtdcQryInstrumentMarginRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryInstrumentMarginRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    req.HedgeFlag = getChar(params, "HedgeFlag");
    int ret       = this->api->ReqQryInstrumentMarginRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInstrumentCommissionRate") {
    TD_DEBUG_LOG("call function reqQryInstrumentCommissionRate");
    TdReqID++;
    CThostFtdcQryInstrumentCommissionRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryInstrumentCommissionRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryInstrumentCommissionRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryExchange") {
    TD_DEBUG_LOG("call function reqQryExchange");
    TdReqID++;
    CThostFtdcQryExchangeField req;
    memset(&req, 0, sizeof(CThostFtdcQryExchangeField));
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    int ret = this->api->ReqQryExchange(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryProduct") {
    TD_DEBUG_LOG("call function reqQryProduct");
    TdReqID++;
    CThostFtdcQryProductField req;
    memset(&req, 0, sizeof(CThostFtdcQryProductField));
    strcpy(req.ProductID, getString(params, "ProductID").c_str());
    req.ProductClass = getChar(params, "ProductClass");
    int ret          = this->api->ReqQryProduct(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInstrument") {
    TD_DEBUG_LOG("call function reqQryInstrument");
    TdReqID++;
    CThostFtdcQryInstrumentField req;
    memset(&req, 0, sizeof(CThostFtdcQryInstrumentField));
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.ExchangeInstID, getString(params, "ExchangeInstID").c_str());
    strcpy(req.ProductID, getString(params, "ProductID").c_str());
    int ret = this->api->ReqQryInstrument(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryDepthMarketData") {
    TD_DEBUG_LOG("call function reqQryDepthMarketData");
    TdReqID++;
    CThostFtdcQryDepthMarketDataField req;
    memset(&req, 0, sizeof(CThostFtdcQryDepthMarketDataField));
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryDepthMarketData(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQrySettlementInfo") {
    TD_DEBUG_LOG("call function reqQrySettlementInfo");
    TdReqID++;
    CThostFtdcQrySettlementInfoField req;
    memset(&req, 0, sizeof(CThostFtdcQrySettlementInfoField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.TradingDay, getString(params, "TradingDay").c_str());
    int ret = this->api->ReqQrySettlementInfo(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryTransferBank") {
    TD_DEBUG_LOG("call function reqQryTransferBank");
    TdReqID++;
    CThostFtdcQryTransferBankField req;
    memset(&req, 0, sizeof(CThostFtdcQryTransferBankField));
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.BankBrchID, getString(params, "BankBrchID").c_str());
    int ret = this->api->ReqQryTransferBank(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInvestorPositionDetail") {
    TD_DEBUG_LOG("call function reqQryInvestorPositionDetail");
    TdReqID++;
    CThostFtdcQryInvestorPositionDetailField req;
    memset(&req, 0, sizeof(CThostFtdcQryInvestorPositionDetailField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryInvestorPositionDetail(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryNotice") {
    TD_DEBUG_LOG("call function reqQryNotice");
    TdReqID++;
    CThostFtdcQryNoticeField req;
    memset(&req, 0, sizeof(CThostFtdcQryNoticeField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    int ret = this->api->ReqQryNotice(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQrySettlementInfoConfirm") {
    TD_DEBUG_LOG("call function reqQrySettlementInfoConfirm");
    TdReqID++;
    CThostFtdcQrySettlementInfoConfirmField req;
    memset(&req, 0, sizeof(CThostFtdcQrySettlementInfoConfirmField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    int ret = this->api->ReqQrySettlementInfoConfirm(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInvestorPositionCombineDetail") {
    TD_DEBUG_LOG("call function reqQryInvestorPositionCombineDetail");
    TdReqID++;
    CThostFtdcQryInvestorPositionCombineDetailField req;
    memset(&req, 0, sizeof(CThostFtdcQryInvestorPositionCombineDetailField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.CombInstrumentID, getString(params, "CombInstrumentID").c_str());
    int ret = this->api->ReqQryInvestorPositionCombineDetail(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryCfmmcTradingAccountKey") {
    TD_DEBUG_LOG("call function reqQryCfmmcTradingAccountKey");
    TdReqID++;
    CThostFtdcQryCFMMCTradingAccountKeyField req;
    memset(&req, 0, sizeof(CThostFtdcQryCFMMCTradingAccountKeyField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    int ret = this->api->ReqQryCFMMCTradingAccountKey(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryEWarrantOffset") {
    TD_DEBUG_LOG("call function reqQryEWarrantOffset");
    TdReqID++;
    CThostFtdcQryEWarrantOffsetField req;
    memset(&req, 0, sizeof(CThostFtdcQryEWarrantOffsetField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryEWarrantOffset(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInvestorProductGroupMargin") {
    TD_DEBUG_LOG("call function reqQryInvestorProductGroupMargin");
    TdReqID++;
    CThostFtdcQryInvestorProductGroupMarginField req;
    memset(&req, 0, sizeof(CThostFtdcQryInvestorProductGroupMarginField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.ProductGroupID, getString(params, "ProductGroupID").c_str());
    req.HedgeFlag = getChar(params, "HedgeFlag");
    int ret       = this->api->ReqQryInvestorProductGroupMargin(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryExchangeMarginRate") {
    TD_DEBUG_LOG("call function reqQryExchangeMarginRate");
    TdReqID++;
    CThostFtdcQryExchangeMarginRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryExchangeMarginRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    req.HedgeFlag = getChar(params, "HedgeFlag");
    int ret       = this->api->ReqQryExchangeMarginRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryExchangeMarginRateAdjust") {
    TD_DEBUG_LOG("call function reqQryExchangeMarginRateAdjust");
    TdReqID++;
    CThostFtdcQryExchangeMarginRateAdjustField req;
    memset(&req, 0, sizeof(CThostFtdcQryExchangeMarginRateAdjustField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    req.HedgeFlag = getChar(params, "HedgeFlag");
    int ret       = this->api->ReqQryExchangeMarginRateAdjust(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryExchangeRate") {
    TD_DEBUG_LOG("call function reqQryExchangeRate");
    TdReqID++;
    CThostFtdcQryExchangeRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryExchangeRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.FromCurrencyID, getString(params, "FromCurrencyID").c_str());
    strcpy(req.ToCurrencyID, getString(params, "ToCurrencyID").c_str());
    int ret = this->api->ReqQryExchangeRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQrySecAgentAcidMap") {
    TD_DEBUG_LOG("call function reqQrySecAgentAcidMap");
    TdReqID++;
    CThostFtdcQrySecAgentACIDMapField req;
    memset(&req, 0, sizeof(CThostFtdcQrySecAgentACIDMapField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.UserID, getString(params, "UserID").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    int ret = this->api->ReqQrySecAgentACIDMap(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryProductExchRate") {
    TD_DEBUG_LOG("call function reqQryProductExchRate");
    TdReqID++;
    CThostFtdcQryProductExchRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryProductExchRateField));
    strcpy(req.ProductID, getString(params, "ProductID").c_str());
    int ret = this->api->ReqQryProductExchRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryProductGroup") {
    TD_DEBUG_LOG("call function reqQryProductGroup");
    TdReqID++;
    CThostFtdcQryProductGroupField req;
    memset(&req, 0, sizeof(CThostFtdcQryProductGroupField));
    strcpy(req.ProductID, getString(params, "ProductID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    int ret = this->api->ReqQryProductGroup(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryMmInstrumentCommissionRate") {
    TD_DEBUG_LOG("call function reqQryMmInstrumentCommissionRate");
    TdReqID++;
    CThostFtdcQryMMInstrumentCommissionRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryMMInstrumentCommissionRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryMMInstrumentCommissionRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryMmOptionInstrCommRate") {
    TD_DEBUG_LOG("call function reqQryMmOptionInstrCommRate");
    TdReqID++;
    CThostFtdcQryMMOptionInstrCommRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryMMOptionInstrCommRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryMMOptionInstrCommRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryInstrumentOrderCommRate") {
    TD_DEBUG_LOG("call function reqQryInstrumentOrderCommRate");
    TdReqID++;
    CThostFtdcQryInstrumentOrderCommRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryInstrumentOrderCommRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryInstrumentOrderCommRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryOptionInstrTradeCost") {
    TD_DEBUG_LOG("call function reqQryOptionInstrTradeCost");
    TdReqID++;
    CThostFtdcQryOptionInstrTradeCostField req;
    memset(&req, 0, sizeof(CThostFtdcQryOptionInstrTradeCostField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    req.HedgeFlag       = getChar(params, "HedgeFlag");
    req.InputPrice      = getNumber(params, "InputPrice");
    req.UnderlyingPrice = getNumber(params, "UnderlyingPrice");
    int ret             = this->api->ReqQryOptionInstrTradeCost(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryOptionInstrCommRate") {
    TD_DEBUG_LOG("call function reqQryOptionInstrCommRate");
    TdReqID++;
    CThostFtdcQryOptionInstrCommRateField req;
    memset(&req, 0, sizeof(CThostFtdcQryOptionInstrCommRateField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryOptionInstrCommRate(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryExecOrder") {
    TD_DEBUG_LOG("call function reqQryExecOrder");
    TdReqID++;
    CThostFtdcQryExecOrderField req;
    memset(&req, 0, sizeof(CThostFtdcQryExecOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.ExecOrderSysID, getString(params, "ExecOrderSysID").c_str());
    strcpy(req.InsertTimeStart, getString(params, "InsertTimeStart").c_str());
    strcpy(req.InsertTimeEnd, getString(params, "InsertTimeEnd").c_str());
    int ret = this->api->ReqQryExecOrder(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryForQuote") {
    TD_DEBUG_LOG("call function reqQryForQuote");
    TdReqID++;
    CThostFtdcQryForQuoteField req;
    memset(&req, 0, sizeof(CThostFtdcQryForQuoteField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InsertTimeStart, getString(params, "InsertTimeStart").c_str());
    strcpy(req.InsertTimeEnd, getString(params, "InsertTimeEnd").c_str());
    int ret = this->api->ReqQryForQuote(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryQuote") {
    TD_DEBUG_LOG("call function reqQryQuote");
    TdReqID++;
    CThostFtdcQryQuoteField req;
    memset(&req, 0, sizeof(CThostFtdcQryQuoteField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.QuoteSysID, getString(params, "QuoteSysID").c_str());
    strcpy(req.InsertTimeStart, getString(params, "InsertTimeStart").c_str());
    strcpy(req.InsertTimeEnd, getString(params, "InsertTimeEnd").c_str());
    int ret = this->api->ReqQryQuote(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryCombInstrumentGuard") {
    TD_DEBUG_LOG("call function reqQryCombInstrumentGuard");
    TdReqID++;
    CThostFtdcQryCombInstrumentGuardField req;
    memset(&req, 0, sizeof(CThostFtdcQryCombInstrumentGuardField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryCombInstrumentGuard(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryCombAction") {
    TD_DEBUG_LOG("call function reqQryCombAction");
    TdReqID++;
    CThostFtdcQryCombActionField req;
    memset(&req, 0, sizeof(CThostFtdcQryCombActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    int ret = this->api->ReqQryCombAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryTransferSerial") {
    TD_DEBUG_LOG("call function reqQryTransferSerial");
    TdReqID++;
    CThostFtdcQryTransferSerialField req;
    memset(&req, 0, sizeof(CThostFtdcQryTransferSerialField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    int ret = this->api->ReqQryTransferSerial(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryAccountregister") {
    TD_DEBUG_LOG("call function reqQryAccountregister");
    TdReqID++;
    CThostFtdcQryAccountregisterField req;
    memset(&req, 0, sizeof(CThostFtdcQryAccountregisterField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.BankBranchID, getString(params, "BankBranchID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    int ret = this->api->ReqQryAccountregister(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryContractBank") {
    TD_DEBUG_LOG("call function reqQryContractBank");
    TdReqID++;
    CThostFtdcQryContractBankField req;
    memset(&req, 0, sizeof(CThostFtdcQryContractBankField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.BankBrchID, getString(params, "BankBrchID").c_str());
    int ret = this->api->ReqQryContractBank(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryParkedOrder") {
    TD_DEBUG_LOG("call function reqQryParkedOrder");
    TdReqID++;
    CThostFtdcQryParkedOrderField req;
    memset(&req, 0, sizeof(CThostFtdcQryParkedOrderField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    int ret = this->api->ReqQryParkedOrder(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryParkedOrderAction") {
    TD_DEBUG_LOG("call function reqQryParkedOrderAction");
    TdReqID++;
    CThostFtdcQryParkedOrderActionField req;
    memset(&req, 0, sizeof(CThostFtdcQryParkedOrderActionField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    int ret = this->api->ReqQryParkedOrderAction(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryTradingNotice") {
    TD_DEBUG_LOG("call function reqQryTradingNotice");
    TdReqID++;
    CThostFtdcQryTradingNoticeField req;
    memset(&req, 0, sizeof(CThostFtdcQryTradingNoticeField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    int ret = this->api->ReqQryTradingNotice(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryBrokerTradingParams") {
    TD_DEBUG_LOG("call function reqQryBrokerTradingParams");
    TdReqID++;
    CThostFtdcQryBrokerTradingParamsField req;
    memset(&req, 0, sizeof(CThostFtdcQryBrokerTradingParamsField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    int ret = this->api->ReqQryBrokerTradingParams(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQryBrokerTradingAlgos") {
    TD_DEBUG_LOG("call function reqQryBrokerTradingAlgos");
    TdReqID++;
    CThostFtdcQryBrokerTradingAlgosField req;
    memset(&req, 0, sizeof(CThostFtdcQryBrokerTradingAlgosField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.ExchangeID, getString(params, "ExchangeID").c_str());
    strcpy(req.InstrumentID, getString(params, "InstrumentID").c_str());
    int ret = this->api->ReqQryBrokerTradingAlgos(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQueryCfmmcTradingAccountToken") {
    TD_DEBUG_LOG("call function reqQueryCfmmcTradingAccountToken");
    TdReqID++;
    CThostFtdcQueryCFMMCTradingAccountTokenField req;
    memset(&req, 0, sizeof(CThostFtdcQueryCFMMCTradingAccountTokenField));
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.InvestorID, getString(params, "InvestorID").c_str());
    int ret = this->api->ReqQueryCFMMCTradingAccountToken(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqFromBankToFutureByFuture") {
    TD_DEBUG_LOG("call function reqFromBankToFutureByFuture");
    TdReqID++;
    CThostFtdcReqTransferField req;
    memset(&req, 0, sizeof(CThostFtdcReqTransferField));
    strcpy(req.TradeCode, getString(params, "TradeCode").c_str());
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.BankBranchID, getString(params, "BankBranchID").c_str());
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.BrokerBranchID, getString(params, "BrokerBranchID").c_str());
    strcpy(req.TradeDate, getString(params, "TradeDate").c_str());
    strcpy(req.TradeTime, getString(params, "TradeTime").c_str());
    strcpy(req.BankSerial, getString(params, "BankSerial").c_str());
    strcpy(req.TradingDay, getString(params, "TradingDay").c_str());
    req.PlateSerial  = getNumber(params, "PlateSerial");
    req.LastFragment = getChar(params, "LastFragment");
    req.SessionID    = getNumber(params, "SessionID");
    strcpy(req.CustomerName, getString(params, "CustomerName").c_str());
    req.IdCardType = getChar(params, "IdCardType");
    strcpy(req.IdentifiedCardNo, getString(params, "IdentifiedCardNo").c_str());
    req.CustType = getChar(params, "CustType");
    strcpy(req.BankAccount, getString(params, "BankAccount").c_str());
    strcpy(req.BankPassWord, getString(params, "BankPassWord").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.Password, getString(params, "Password").c_str());
    req.InstallID    = getNumber(params, "InstallID");
    req.FutureSerial = getNumber(params, "FutureSerial");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.VerifyCertNoFlag = getChar(params, "VerifyCertNoFlag");
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    req.TradeAmount       = getNumber(params, "TradeAmount");
    req.FutureFetchAmount = getNumber(params, "FutureFetchAmount");
    req.FeePayFlag        = getChar(params, "FeePayFlag");
    req.CustFee           = getNumber(params, "CustFee");
    req.BrokerFee         = getNumber(params, "BrokerFee");
    strcpy(req.Message, getString(params, "Message").c_str());
    strcpy(req.Digest, getString(params, "Digest").c_str());
    req.BankAccType = getChar(params, "BankAccType");
    strcpy(req.DeviceID, getString(params, "DeviceID").c_str());
    req.BankSecuAccType = getChar(params, "BankSecuAccType");
    strcpy(req.BrokerIDByBank, getString(params, "BrokerIDByBank").c_str());
    strcpy(req.BankSecuAcc, getString(params, "BankSecuAcc").c_str());
    req.BankPwdFlag = getChar(params, "BankPwdFlag");
    req.SecuPwdFlag = getChar(params, "SecuPwdFlag");
    strcpy(req.OperNo, getString(params, "OperNo").c_str());
    req.RequestID      = getNumber(params, "RequestID");
    req.TID            = getNumber(params, "TID");
    req.TransferStatus = getChar(params, "TransferStatus");
    strcpy(req.LongCustomerName, getString(params, "LongCustomerName").c_str());
    int ret = this->api->ReqFromBankToFutureByFuture(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqFromFutureToBankByFuture") {
    TD_DEBUG_LOG("call function reqFromFutureToBankByFuture");
    TdReqID++;
    CThostFtdcReqTransferField req;
    memset(&req, 0, sizeof(CThostFtdcReqTransferField));
    strcpy(req.TradeCode, getString(params, "TradeCode").c_str());
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.BankBranchID, getString(params, "BankBranchID").c_str());
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.BrokerBranchID, getString(params, "BrokerBranchID").c_str());
    strcpy(req.TradeDate, getString(params, "TradeDate").c_str());
    strcpy(req.TradeTime, getString(params, "TradeTime").c_str());
    strcpy(req.BankSerial, getString(params, "BankSerial").c_str());
    strcpy(req.TradingDay, getString(params, "TradingDay").c_str());
    req.PlateSerial  = getNumber(params, "PlateSerial");
    req.LastFragment = getChar(params, "LastFragment");
    req.SessionID    = getNumber(params, "SessionID");
    strcpy(req.CustomerName, getString(params, "CustomerName").c_str());
    req.IdCardType = getChar(params, "IdCardType");
    strcpy(req.IdentifiedCardNo, getString(params, "IdentifiedCardNo").c_str());
    req.CustType = getChar(params, "CustType");
    strcpy(req.BankAccount, getString(params, "BankAccount").c_str());
    strcpy(req.BankPassWord, getString(params, "BankPassWord").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.Password, getString(params, "Password").c_str());
    req.InstallID    = getNumber(params, "InstallID");
    req.FutureSerial = getNumber(params, "FutureSerial");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.VerifyCertNoFlag = getChar(params, "VerifyCertNoFlag");
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    req.TradeAmount       = getNumber(params, "TradeAmount");
    req.FutureFetchAmount = getNumber(params, "FutureFetchAmount");
    req.FeePayFlag        = getChar(params, "FeePayFlag");
    req.CustFee           = getNumber(params, "CustFee");
    req.BrokerFee         = getNumber(params, "BrokerFee");
    strcpy(req.Message, getString(params, "Message").c_str());
    strcpy(req.Digest, getString(params, "Digest").c_str());
    req.BankAccType = getChar(params, "BankAccType");
    strcpy(req.DeviceID, getString(params, "DeviceID").c_str());
    req.BankSecuAccType = getChar(params, "BankSecuAccType");
    strcpy(req.BrokerIDByBank, getString(params, "BrokerIDByBank").c_str());
    strcpy(req.BankSecuAcc, getString(params, "BankSecuAcc").c_str());
    req.BankPwdFlag = getChar(params, "BankPwdFlag");
    req.SecuPwdFlag = getChar(params, "SecuPwdFlag");
    strcpy(req.OperNo, getString(params, "OperNo").c_str());
    req.RequestID      = getNumber(params, "RequestID");
    req.TID            = getNumber(params, "TID");
    req.TransferStatus = getChar(params, "TransferStatus");
    strcpy(req.LongCustomerName, getString(params, "LongCustomerName").c_str());
    int ret = this->api->ReqFromFutureToBankByFuture(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else if (funcName == "reqQueryBankAccountMoneyByFuture") {
    TD_DEBUG_LOG("call function reqQueryBankAccountMoneyByFuture");
    TdReqID++;
    CThostFtdcReqQueryAccountField req;
    memset(&req, 0, sizeof(CThostFtdcReqQueryAccountField));
    strcpy(req.TradeCode, getString(params, "TradeCode").c_str());
    strcpy(req.BankID, getString(params, "BankID").c_str());
    strcpy(req.BankBranchID, getString(params, "BankBranchID").c_str());
    strcpy(req.BrokerID, getString(params, "BrokerID").c_str());
    strcpy(req.BrokerBranchID, getString(params, "BrokerBranchID").c_str());
    strcpy(req.TradeDate, getString(params, "TradeDate").c_str());
    strcpy(req.TradeTime, getString(params, "TradeTime").c_str());
    strcpy(req.BankSerial, getString(params, "BankSerial").c_str());
    strcpy(req.TradingDay, getString(params, "TradingDay").c_str());
    req.PlateSerial  = getNumber(params, "PlateSerial");
    req.LastFragment = getChar(params, "LastFragment");
    req.SessionID    = getNumber(params, "SessionID");
    strcpy(req.CustomerName, getString(params, "CustomerName").c_str());
    req.IdCardType = getChar(params, "IdCardType");
    strcpy(req.IdentifiedCardNo, getString(params, "IdentifiedCardNo").c_str());
    req.CustType = getChar(params, "CustType");
    strcpy(req.BankAccount, getString(params, "BankAccount").c_str());
    strcpy(req.BankPassWord, getString(params, "BankPassWord").c_str());
    strcpy(req.AccountID, getString(params, "AccountID").c_str());
    strcpy(req.Password, getString(params, "Password").c_str());
    req.FutureSerial = getNumber(params, "FutureSerial");
    req.InstallID    = getNumber(params, "InstallID");
    strcpy(req.UserID, getString(params, "UserID").c_str());
    req.VerifyCertNoFlag = getChar(params, "VerifyCertNoFlag");
    strcpy(req.CurrencyID, getString(params, "CurrencyID").c_str());
    strcpy(req.Digest, getString(params, "Digest").c_str());
    req.BankAccType = getChar(params, "BankAccType");
    strcpy(req.DeviceID, getString(params, "DeviceID").c_str());
    req.BankSecuAccType = getChar(params, "BankSecuAccType");
    strcpy(req.BrokerIDByBank, getString(params, "BrokerIDByBank").c_str());
    strcpy(req.BankSecuAcc, getString(params, "BankSecuAcc").c_str());
    req.BankPwdFlag = getChar(params, "BankPwdFlag");
    req.SecuPwdFlag = getChar(params, "SecuPwdFlag");
    strcpy(req.OperNo, getString(params, "OperNo").c_str());
    req.RequestID = getNumber(params, "RequestID");
    req.TID       = getNumber(params, "TID");
    strcpy(req.LongCustomerName, getString(params, "LongCustomerName").c_str());
    int ret = this->api->ReqQueryBankAccountMoneyByFuture(&req, TdReqID);
    return Napi::Number::New(info.Env(), ret);
  } else {
    return Napi::Number::New(info.Env(), NONE_TRADER_API_FUNC);
  }

  return Napi::Number::New(info.Env(), STATUS_SUCCESS);
}